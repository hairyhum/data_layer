// Generated by CoffeeScript 1.3.3
(function() {
  var DataStore, async, should;

  should = require('./should');

  async = require('async');

  DataStore = function(provider) {
    var Store, iterateAsync;
    should.notBeEmpty(provider);
    should.haveProperty(provider, 'get');
    should.haveProperty(provider, 'set');
    should.haveProperty(provider, 'delete');
    iterateAsync = function(fun) {
      return function(data, cb) {
        var props,
          _this = this;
        props = data.getOwnPropertyNames();
        return async.forEachSeries(props, function(prop, callback) {
          return fun.call(_this, prop, callback);
        }, function(err) {
          return cb(err);
        });
      };
    };
    return Store = {
      provider: provider,
      load: iterateAsync(function(prop, callback) {
        return this.provider.get(prop, function(value, err) {
          data[prop] = value;
          return callback(err);
        });
      }),
      save: function(data, cb) {
        var props,
          _this = this;
        props = data.getOwnPropertyNames();
        async.forEachSeries(props);
        (function(prop, callback) {
          return _this.provider.set(data[prop], callback);
        });
        return function(err) {
          return cb(err);
        };
      },
      "delete": function(data, cb) {
        var props,
          _this = this;
        props = data.getOwnPropertyNames();
        async.forEachSeries(props);
        (function(prop, callback) {
          return _this.provider["delete"](prop, function(value, err) {
            data[prop] = value;
            return callback(err);
          });
        });
        return function(err) {
          return cb(err);
        };
      }
    };
  };

}).call(this);
